#!/usr/bin/python3

import argparse
import re
import os.path
import collections

def parse_include_arguments(command_line):
    """
    command_line - str

    return
    - str or None - prefix
    - str or None - suffix
    - str - remaining command line
    """

    if command_line.startswith("-"):
        items = command_line.split(maxsplit=1)
        return items[0][1:], None, items[1]
    if command_line.startswith("+"):
        items = command_line.split(maxsplit=1)
        return None, items[0][1:], items[1]
    return None, None, command_line

_condition_pattern = re.compile(r"(?P<if>if|elif)(?P<not>n?)(?P<rel>def|eq)")
def include(input_file, output_file, configs, states, if_stack):
    #  function `include` {{{ # 
    """
    input_file - iterable of str
    output_file - object supporting `write` accepting str
    configs - dict like
      {
        "prefix": str,
        "suffix": str,
        "path": str
      }
    states - dict like
      {
        "macros": dict like {str: str}
      }
    if_stack - collections.deque of (bool, bool)
    """

    macros = states["macros"]

    prefix = configs["prefix"]
    suffix = configs["suffix"]
    path = configs["path"]

    for l in input_file:
        unstripped_line = l[:-1]
        l = l.strip()
        if l.startswith(prefix) and l.endswith(suffix):
            candidate = l[len(prefix):-len(suffix)] if len(suffix)>0 else l[len(prefix):]
            candidate = candidate.strip()

            command = candidate.split(maxsplit=1)
            if len(command)<1:
                if if_stack[-1][1]:
                    for mcr, mcr_val in macros.items():
                        unstripped_line = re.sub(r"\b" + mcr + r"\b", mcr_val, unstripped_line, flags=re.ASCII)
                    output_file.write(unstripped_line + "\n")
            elif command[0]=="define":
                if if_stack[-1][1]:
                    arguments = command[1].split(maxsplit=1)
                    macros[arguments[0]] = arguments[1] if len(arguments)>1 else ""
            elif command[0]=="undef":
                if if_stack[-1][1]:
                    if command[1] in macros:
                        del macros[command[1]]

            elif command[0]=="include":
                if if_stack[-1][1]:
                    in_prefix = prefix
                    in_suffix = suffix
                    prefix_, suffix_, remaining = parse_include_arguments(command[1])
                    while prefix_ is not None or suffix_ is not None:
                        if prefix_ is not None:
                            in_prefix = prefix_
                        elif suffix_ is not None:
                            in_suffix = suffix_

                        prefix_, suffix_, remaining = parse_include_arguments(remaining)

                    include_file = os.path.join(path, remaining)
                    in_path = os.path.dirname(include_file)

                    with open(include_file) as incl_f:
                        include(incl_f, output_file,
                            configs={
                                "prefix": in_prefix,
                                "suffix": in_suffix,
                                "path": in_path
                            },
                            states={
                                "macros": macros,
                            },
                            if_stack=if_stack)

            elif command[0]=="else":
                if_stack[-1][1] = if_stack[-2][1] and not if_stack[-1][0]
                if_stack[-1][0] = if_stack[-2][1]
            elif command[0]=="endif":
                if_stack.pop()
            else:
                match_ = _condition_pattern.match(command[0])
                if match_ is not None:
                    if match_["if"]=="if":
                        if_stack.append([False, False])
                    if if_stack[-1][0]:
                        if_stack[-1][1] = False
                    else:
                        if not if_stack[-2][1]:
                            condition = False
                        else:
                            if match_["rel"]=="def":
                                condition = command[1] in macros
                                mask = True
                            elif match_["rel"]=="eq":
                                macro_name, macro_value = command[1].split(maxsplit=1)
                                mask = macro_name in macros
                                condition = mask and macros[macro_name]==macro_value

                            if match_["not"]=="n":
                                condition = mask and not condition
                        if_stack[-1] = [condition, condition]
                else:
                    if if_stack[-1][1]:
                        for mcr, mcr_val in macros.items():
                            unstripped_line = re.sub(r"\b" + mcr + r"\b", mcr_val, unstripped_line, flags=re.ASCII)
                        output_file.write(unstripped_line + "\n")
        else:
            if if_stack[-1][1]:
                for mcr, mcr_val in macros.items():
                    unstripped_line = re.sub(r"\b" + mcr + r"\b", mcr_val, unstripped_line, flags=re.ASCII)
                output_file.write(unstripped_line + "\n")
    #  }}} function `include` # 

def main():
    parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter)

    parser.add_argument("--prefix", type=str, help="Prefix for preprocessing commands.")
    parser.add_argument("--suffix", type=str, help="Suffix for preprocessing commands.")
    parser.add_argument("--nosuffix", action="store_const", const="", dest="suffix",
        help="No suffices is in need.")
    parser.add_argument("--mode", "-m", default="H", type=str, choices=["H", "T", "C", "J"],
        help="""\
H: HTML Comment Mode, e.g., <!-- include a.js -->
T: TeX Comment Mode, e.g., %% define TeX \LaTeX
C: C Preprocessing Instruction Mode, e.g., #define A_TOY_PREPROCESSOR
J: Java Comment Mode, e.g., // include class.java""")

    parser.add_argument("--def", action="append", type=str,
        help="Manually define a macro like \"ABC\" or \"ABC=LSP\", \"=\" in macro name and definitions could be escaped by \"\\\"",
        dest="macro")

    parser.add_argument("file", type=str, help="Input file.")

    parser.add_argument("--output", "-o", default="/dev/stdout", type=str,
        help="Output file")

    args = parser.parse_args()

    mode_dict = {
            "H": {
                "prefix": "<!--",
                "suffix": "-->",
            },
            "T": {
                "prefix": "<!--",
                "suffix": "-->"
            },
            "C": {
                "prefix": "#",
                "suffix": ""
            },
            "J": {
                "prefix": "//",
                "suffix": ""
            }
        }

    mode_data = mode_dict[args.mode]
    prefix = mode_data["prefix"]
    suffix = mode_data["suffix"]

    if args.prefix is not None:
        prefix = args.prefix
    if args.suffix is not None:
        suffix = args.suffix

    definition_separator_pattern = re.compile(r"(?<!\\)=")
    real_equal_mark_pattern = re.compile(r"\\=")

    macros = {}
    if args.macro:
        for mcr in args.macro:
            items = definition_separator_pattern.split(mcr, maxsplit=1)
            macro_name = real_equal_mark_pattern.sub("=", items[0])
            macro_value = real_equal_mark_pattern.sub("=", items[1]) if len(items)>1 else ""
            macros[macro_name] = macro_value

    path = os.path.dirname(args.file)

    if_stack = collections.deque([[True, True]])

    with open(args.file) as in_f,\
            open(args.output, "w") as out_f:
        include(in_f, out_f,
            configs={
                "prefix": prefix,
                "suffix": suffix,
                "path": path
            },
            states={
                "macros": macros,
            },
            if_stack=if_stack)

if __name__ == "__main__":
    main()
